import nifty8 as ift
import libs as Egf
import numpy as np
from src.helper_functions.plot.plot import _density_estimation
from astropy.modeling.models import Gaussian1D
from matplotlib.patches import Ellipse
from matplotlib import cm
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('TkAgg')


class Posterior_Plotter_3():
    def __init__(self, samples, args):

        self.samples = samples
        self.ecomponents = args['ecomponents']
        self.params = args['params']

    def plot(self):
        samples = self.samples

        
        cl=np.array([s for s in samples.iterator(self.ecomponents['chi_lum'])])
        ml, vl = samples.sample_stat(self.ecomponents['chi_lum'])

        ci0=np.array([s for s in samples.iterator(self.ecomponents['chi_int_0'])])
        mi0, vi0 = samples.sample_stat(self.ecomponents['chi_int_0'])

        ce0=np.array([s for s in samples.iterator(self.ecomponents['chi_env_0'])])
        me0, ve0 = samples.sample_stat(self.ecomponents['chi_env_0'])
        
        sl=np.sqrt(vl.val)
        si0=np.sqrt(vi0.val)
        se0=np.sqrt(ve0.val)

        print('cl', ml.val, 'pm', sl)
        print('ci0', mi0.val, 'pm', si0)
        print('ce0', me0.val, 'pm', se0)

        cl_list=[]
        ci0_list=[]
        ce0_list=[]
        for i in range(0,len(cl)):
            cl_list.append(cl[i].val)
            ci0_list.append(ci0[i].val)
            ce0_list.append(ce0[i].val)
        cl_array=np.array(cl_list)
        ci0_array=np.array(ci0_list)
        ce0_array=np.array(ce0_list)

        fig, axs = plt.subplots(3, 3)
        

        
        xxx, yyy, zzz = _density_estimation(cl_array, ci0_array, ml.val-5*sl,ml.val+5*sl, mi0.val-5*si0,mi0.val+5*si0, 100)
        axs[0,0].imshow(np.rot90(zzz), cmap=plt.cm.gist_earth_r, extent=[ml.val-5*sl,ml.val+5*sl, mi0.val-5*si0,mi0.val+5*si0], aspect="auto")
        axs[0,0].scatter(cl_array, ci0_array, color='k', s=5)
        axs[0,0].set_ylabel('$\chi_{int,0}$', fontsize = 20.0)
        axs[0,0].set_ylim(mi0.val-5*si0,mi0.val+5*si0)
        axs[0,0].set_xlim(ml.val-5*sl,ml.val+5*sl)


        xxx, yyy, zzz = _density_estimation(ce0_array, ci0_array, me0.val-5*se0,me0.val+5*se0, mi0.val-5*si0,mi0.val+5*si0, 100)
        axs[0,1].imshow(np.rot90(zzz), cmap=plt.cm.gist_earth_r, extent=[me0.val-5*se0,me0.val+5*se0, mi0.val-5*si0,mi0.val+5*si0], aspect="auto")
        axs[0,1].scatter(ce0_array, ci0_array, color='k', s=5)
        axs[0,1].set_xlabel('$\chi_{env,0}$', fontsize = 20.0)
        axs[0,1].set_ylim(mi0.val-5*si0,mi0.val+5*si0)
        axs[0,1].set_xlim(me0.val-5*se0,me0.val+5*se0)


        xxx, yyy, zzz = _density_estimation(cl_array, ce0_array, ml.val-5*sl,ml.val+5*sl, me0.val-5*se0,me0.val+5*se0, 100)
        axs[1,0].imshow(np.rot90(zzz), cmap=plt.cm.gist_earth_r, extent=[ml.val-5*sl,ml.val+5*sl, me0.val-5*se0,me0.val+5*se0], aspect="auto")
        axs[1,0].scatter(cl_array, ce0_array, color='k', s=5)
        axs[1,0].set_ylabel('$\chi_{env,0}$', fontsize = 20.0)
        axs[1,0].set_xlabel('$\chi_{lum}$', fontsize = 20.0)
        axs[1,0].set_xlim(ml.val-5*sl,ml.val+5*sl)
        axs[1,0].set_ylim(me0.val-5*se0,me0.val+5*se0)

        #axs[1,1].axis('off')




        plt.subplots_adjust(wspace=0, hspace=0)

        axs[0,0].axhline(y = self.params['mean.mean_int'], color = 'b', linestyle = '--') 
        axs[0,0].axvline(x = self.params['mean.mean_lum'], color = 'b', linestyle='--')

        axs[1,0].axhline(y = self.params['mean.mean_env'], color = 'b', linestyle = '--') 
        axs[1,0].axvline(x = self.params['mean.mean_lum'], color = 'b', linestyle='--')

        axs[0,1].axhline(y = self.params['mean.mean_int'], color = 'b', linestyle = '--') 
        axs[0,1].axvline(x = self.params['mean.mean_env'], color = 'b', linestyle='--')


        axs[1,0].sharex(axs[0,0])
        #axs[0,1].sharex(axs[1,1])
        axs[0,1].sharey(axs[0,0])
        axs[1,1].sharey(axs[1,0])

        axs[1,0].tick_params(labelbottom=True, direction='in')
        axs[0,1].tick_params(labelbottom=False, direction='in')
        axs[0,1].tick_params(labelleft=False, direction='in')
        axs[1,1].tick_params(labelleft=False, direction='in')
        axs[0,0].tick_params(labelleft=True, labelbottom=False, direction='in')






        axs[2,0].hist(cl_array, bins=10, color='lightgray')
        axs[2,0].set_xlabel('$\chi_{lum}$', fontsize = 20.0)
        axs[2,0].tick_params('y', labelleft=False)
        axs[2,0].set_xlim(ml.val-5*sl,ml.val+5*sl)

        axs[2,0].axvline(x = ml.val+sl, color = 'green', linestyle='--', label='1-$\sigma$')
        axs[2,0].axvline(x = ml.val-sl, color = 'green', linestyle='--')

        axs[2,0].axvline(x = ml.val+2*sl, color = 'orange', linestyle='--', label='2-$\sigma$')
        axs[2,0].axvline(x = ml.val-2*sl, color = 'orange', linestyle='--')

        axs[2,0].axvline(x = ml.val+3*sl, color = 'red', linestyle='--', label='3-$\sigma$')
        axs[2,0].axvline(x = ml.val-3*sl, color = 'red', linestyle='--')

        axs[2,0].axvline(x = self.params['mean.mean_lum'], color = 'k', linestyle = '--', label='Mock') 
       

        x = np.linspace(ml.val-5*sl,ml.val+5*sl, 1000)
        #amplitude might need to be adjusted
        y = Gaussian1D(amplitude=1, mean=self.params['prior_mean.prior_mean_lum'], stddev= self.params['prior_std.prior_std_lum'])
      
        axs[2,0].plot(x, y(x), 'b-', label='Prior')


        
        axs[1,1].hist(ce0_array, bins=10, color='lightgray')
        axs[1,1].set_xlabel('$\chi_{env}$', fontsize = 20.0)
        axs[1,1].tick_params('y', labelleft=False)
        axs[1,1].set_xlim(me0.val-5*se0,me0.val+5*se0)

        axs[1,1].axvline(x = me0.val+se0, color = 'green', linestyle='--', label='1-$\sigma$')
        axs[1,1].axvline(x = me0.val-se0, color = 'green', linestyle='--')

        axs[1,1].axvline(x = me0.val+2*se0, color = 'orange', linestyle='--', label='2-$\sigma$')
        axs[1,1].axvline(x = me0.val-2*se0, color = 'orange', linestyle='--')

        axs[1,1].axvline(x = me0.val+3*se0, color = 'red', linestyle='--', label='3-$\sigma$')
        axs[1,1].axvline(x = me0.val-3*se0, color = 'red', linestyle='--')

        axs[1,1].axvline(x = self.params['mean.mean_env'], color = 'k', linestyle = '--', label='Mock') 
       

        x = np.linspace(me0.val-5*se0,me0.val+5*se0, 1000)
        #amplitude might need to be adjusted
        y = Gaussian1D(amplitude=1, mean=self.params['prior_mean.prior_mean_env'], stddev= self.params['prior_std.prior_std_env'])
      
        axs[1,1].plot(x, y(x), 'b-', label='Prior')

        
        axs[0,2].hist(ci0_array, bins=10, color='lightgray')
        axs[0,2].set_xlabel('$\chi_{int}$', fontsize = 20.0)
        axs[0,2].tick_params('y', labelleft=False)
        axs[0,2].set_xlim(mi0.val-5*si0,mi0.val+5*si0)

        axs[0,2].axvline(x = mi0.val+si0, color = 'green', linestyle='--', label='1-$\sigma$')
        axs[0,2].axvline(x = mi0.val-si0, color = 'green', linestyle='--')

        axs[0,2].axvline(x = mi0.val+2*si0, color = 'orange', linestyle='--', label='2-$\sigma$')
        axs[0,2].axvline(x = mi0.val-2*si0, color = 'orange', linestyle='--')

        axs[0,2].axvline(x = mi0.val+3*si0, color = 'red', linestyle='--', label='3-$\sigma$')
        axs[0,2].axvline(x = mi0.val-3*si0, color = 'red', linestyle='--')

        axs[0,2].axvline(x = self.params['mean.mean_int'], color = 'k', linestyle = '--', label='Mock') 
       

        x = np.linspace(mi0.val-5*si0,mi0.val+5*si0, 1000)
        #amplitude might need to be adjusted
        y = Gaussian1D(amplitude=1, mean=self.params['prior_mean.prior_mean_int'], stddev= self.params['prior_std.prior_std_int'])
      
        axs[0,2].plot(x, y(x), 'b-', label='Prior')

        axs[1,2].axis('off')
        axs[2,1].axis('off')
        axs[2,2].axis('off')
        axs[2,2].legend(loc="upper right")
